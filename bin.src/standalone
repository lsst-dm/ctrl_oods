#!/usr/bin/env python
# This file is part of ctrl_oods
#
# Developed for the LSST Data Management System.
# This product includes software developed by the LSST Project
# (https://www.lsst.org).
# See the COPYRIGHT file at the top-level directory of this distribution
# for details of code ownership.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

import asyncio
import logging
import os


import yaml
from lsst.ctrl.oods.msgIngester import MsgIngester
import lsst.log as lsstlog

lsstlog.usePythonLogging()

LOGGER = logging.getLogger(__name__)
F = "%(levelname) -10s %(asctime)s.%(msecs)03dZ %(name) -30s %(funcName) -35s %(lineno) -5d: %(message)s"
logging.basicConfig(level=logging.INFO, format=(F), datefmt="%Y-%m-%d %H:%M:%S")


class Standalone(object):
    """Standalone class to run tests without CSC requirements."""

    def __init__(self):
        self.config = None
        # import YAML file here
        if "CTRL_OODS_CONFIG_FILE" in os.environ:
            filename = os.environ["CTRL_OODS_CONFIG_FILE"]
            LOGGER.info("using configuration %s", filename)
            with open(filename, "r") as f:
                self.config = yaml.safe_load(f)
        else:
            raise FileNotFoundError("CTRL_OODS_CONFIG_FILE is not set")

        self.task_list = None

        self.ingester_config = self.config["ingester"]

    async def send_imageInOODS(self, info):
        """Send SAL message that the images has been ingested into the OODS

        Parameters
        ----------
        info : `dict`
            information about the image
        """
        camera = info["CAMERA"]
        obsid = info["OBSID"]
        raft = "undef"
        if "RAFT" in info:
            raft = info["RAFT"]
        sensor = "undef"
        if "SENSOR" in info:
            sensor = info["SENSOR"]
        status_code = info["STATUS_CODE"]
        description = info["DESCRIPTION"]

        s = f"would send camera={camera} obsid={obsid} raft={raft} sensor={sensor} "
        s = s + f"statusCode={status_code}, description={description}"
        LOGGER.info(s)

    async def start_services(self):
        """Start all cleanup and archiving services"""

        # self added here, and by the time it's utilized by MsgIngester
        # the CSC will be up and running
        self.ingester = MsgIngester(self.config, self)

        self.task_list = self.ingester.run_tasks()

    async def stop_services(self):
        """Stop all cleanup and archiving services"""
        print("calling stop_tasks")
        self.ingester.stop_tasks()

    async def done(self):
        print("waiting...")
        while True:
            await asyncio.sleep(3600)
        print("done!")

    async def main(self):
        await self.start_services()
        group = asyncio.gather(self.done())
        print("gathering")
        await group
        print("finished")
        await self.stop_services()
        print("complete")


if __name__ == "__main__":
    alone = Standalone()
    asyncio.run(alone.main())
